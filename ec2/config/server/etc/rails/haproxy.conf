# Configuration file for HAProxy, general-purpose proxy used
# in RubyWorks stack to distribute load between multiple Mongrel processes
# 
# Original documentation for this file is here: 
#     http://haproxy.1wt.eu/download/1.2/doc/haproxy-en.txt

global
  # maximum number of simultaneous active connections from an upstream web server
  maxconn 500 

  # Logging to syslog facility local0. HAProxy can only log to a TCP socket, therefore 
  # syslogd must be started with -r option. See RubyWorks documentation for detailed 
  # instructions.
  log   127.0.0.1       local0

  # Run under unprivileged rails account
  user rails
  group rails

  # Uncomment the statement below to turn on verbose logging
  #debug

# Settings in the defaults section apply to all services (unless you change it,
# this configuration defines one service, called rails).
defaults

  # apply log settings from the global section above to services
  log global

  # Proxy incoming traffic as HTTP requests
  mode http

  # Distribute incoming requests between Mongrels by round robin algorythm.
  # Note that because of 'maxconn 1' settings in the listen section, Mongrels 
  # that are busy processing some other request will actually be skipped.
  # So, the actual load-balancing behavior is smarter than simple round robin.
  balance roundrobin

  # Maximum number of simultaneous active connections from an upstream web server 
  # per service
  maxconn 500

  # Log details about HTTP requests
  option httplog

  # Abort request if client closes its output channel while waiting for the 
  # request. HAProxy documentation has a long explanation for this option.
  option abortonclose

  # If sending a request to one Mongrel fails, try to send it to another, 3 times
  # before aborting the request
  retries 3

  # Do not enforce session affinity (i.e., an HTTP session can be served by 
  # any Mongrel, not just the one that started the session
  redispatch

  # Timeout a request if the client did not read any data for 15 seconds
  clitimeout 15000

  # Timeout a request if Mongrel does not accept a connection for 30 seconds
  contimeout 30000

  # Timeout a request if Mongrel does not accept the data on the connection,
  # or does not send a response back in 30 seconds
  srvtimeout 30000

# Rails service section.
# Traffic incoming to HAProxy on port 3001 will be distributed to Mongrels on
# ports 3002-3005, sending no more than one request at a time to each Mongrel
# HAProxy can handle multiple services (when copying this section,
# make sure to change names and port numbers)  
listen rails :3001
  server rails-1 localhost:3002 maxconn 1 check
  server rails-2 localhost:3003 maxconn 1 check
  server rails-3 localhost:3004 maxconn 1 check
  server rails-4 localhost:3005 maxconn 1 check
